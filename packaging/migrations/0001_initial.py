# Generated by Django 5.1.5 on 2025-01-28 20:07

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Bottle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name or identifier of the bottle', max_length=255)),
                ('bottle_type', models.CharField(choices=[('bordeaux', 'Bordeaux'), ('burgundy', 'Burgundy'), ('champagne', 'Champagne'), ('rhine', 'Rhine'), ('other', 'Other')], help_text='Type/style of the bottle', max_length=50)),
                ('volume', models.FloatField(help_text='Volume in milliliters')),
                ('glass_color', models.CharField(choices=[('clear', 'Clear'), ('green', 'Green'), ('dark_green', 'Dark Green'), ('amber', 'Amber'), ('blue', 'Blue')], help_text='Color of the glass', max_length=50)),
                ('height', models.FloatField(help_text='Height in millimeters')),
                ('diameter', models.FloatField(help_text='Diameter in millimeters')),
                ('weight', models.FloatField(help_text='Weight in grams')),
                ('supplier', models.CharField(help_text='Supplier of the bottles', max_length=255)),
                ('price', models.DecimalField(decimal_places=2, help_text='Price per unit', max_digits=10)),
                ('stock', models.IntegerField(default=0, help_text='Current stock quantity')),
                ('minimum_stock', models.IntegerField(default=0, help_text='Minimum stock level for reordering')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the bottle', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Box',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name or identifier of the box', max_length=255)),
                ('box_type', models.CharField(choices=[('single', 'Single Bottle'), ('double', 'Double Bottle'), ('triple', 'Triple Bottle'), ('six_pack', 'Six Pack'), ('twelve_pack', 'Twelve Pack'), ('shipping', 'Shipping Box'), ('gift', 'Gift Box'), ('other', 'Other')], help_text='Type of box', max_length=50)),
                ('material', models.CharField(choices=[('cardboard', 'Cardboard'), ('wood', 'Wood'), ('plastic', 'Plastic'), ('other', 'Other')], help_text='Material of the box', max_length=50)),
                ('bottle_capacity', models.IntegerField(help_text='Number of bottles the box can hold')),
                ('length', models.FloatField(help_text='Length in millimeters')),
                ('width', models.FloatField(help_text='Width in millimeters')),
                ('height', models.FloatField(help_text='Height in millimeters')),
                ('weight', models.FloatField(help_text='Weight in grams')),
                ('supplier', models.CharField(help_text='Supplier of the boxes', max_length=255)),
                ('price', models.DecimalField(decimal_places=2, help_text='Price per unit', max_digits=10)),
                ('stock', models.IntegerField(default=0, help_text='Current stock quantity')),
                ('minimum_stock', models.IntegerField(default=0, help_text='Minimum stock level for reordering')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the box', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'boxes',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Closure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name or identifier of the closure', max_length=255)),
                ('closure_type', models.CharField(choices=[('cork_natural', 'Natural Cork'), ('cork_synthetic', 'Synthetic Cork'), ('screw_cap', 'Screw Cap'), ('crown_cap', 'Crown Cap'), ('glass_stopper', 'Glass Stopper'), ('other', 'Other')], help_text='Type of closure', max_length=50)),
                ('material', models.CharField(choices=[('cork', 'Cork'), ('synthetic', 'Synthetic'), ('aluminum', 'Aluminum'), ('steel', 'Steel'), ('glass', 'Glass'), ('other', 'Other')], help_text='Material of the closure', max_length=50)),
                ('color', models.CharField(help_text='Color of the closure', max_length=50)),
                ('diameter', models.FloatField(help_text='Diameter in millimeters')),
                ('height', models.FloatField(help_text='Height in millimeters')),
                ('supplier', models.CharField(help_text='Supplier of the closures', max_length=255)),
                ('price', models.DecimalField(decimal_places=2, help_text='Price per unit', max_digits=10)),
                ('stock', models.IntegerField(default=0, help_text='Current stock quantity')),
                ('minimum_stock', models.IntegerField(default=0, help_text='Minimum stock level for reordering')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the closure', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Label',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name or identifier of the label', max_length=255)),
                ('label_type', models.CharField(choices=[('front', 'Front Label'), ('back', 'Back Label'), ('neck', 'Neck Label')], help_text='Type of label', max_length=50)),
                ('material', models.CharField(choices=[('paper', 'Paper'), ('synthetic', 'Synthetic'), ('metallic', 'Metallic'), ('other', 'Other')], help_text='Material of the label', max_length=50)),
                ('width', models.FloatField(help_text='Width in millimeters')),
                ('height', models.FloatField(help_text='Height in millimeters')),
                ('supplier', models.CharField(help_text='Supplier of the labels', max_length=255)),
                ('price', models.DecimalField(decimal_places=2, help_text='Price per unit', max_digits=10)),
                ('stock', models.IntegerField(default=0, help_text='Current stock quantity')),
                ('minimum_stock', models.IntegerField(default=0, help_text='Minimum stock level for reordering')),
                ('design_file', models.FileField(blank=True, help_text='Design file for the label', null=True, upload_to='label_designs/')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the label', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
    ]
